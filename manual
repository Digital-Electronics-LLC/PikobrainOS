PIKOBRAIN MANUAL
by Hanzlu (2019-2020)
--------------------

INTRODUCTION
--------------------
Pikobrain is an operating system coded by Hanzlu starting in 2019. I had for some time been interested in making very low level programming languages and wanted to make them work on a real computer, so I decided I would make an operative system where such languages could be used. However, the more I coded for the OS the more I forgot about the original reason, and the OS turned out to be more of a MS-DOS inspired OS but much worse and less usable, intentionally. At the moment, I try to make an OS you can use for simple normal tasks, but uses as little code as possible while still having some user-friendliness (I guess it is a Forth). With the introduction of version 0.5, Pikobrain has become more user-friendly, but compared to other OSes it's still pretty much not. 

The OS optimally works on an 8MB hard drive and 1MB of RAM. The OS does not have a proper file system but can give access to 8MB of hard disk space.
The effective part of the bootloader is only 74 bytes of binary code. The OS itself (excluding the bootloader) is 1MB of binary code. It includes the ability to edit files, a calculator, a hex to dec convertor, ability to read/write to/from floppy disks as well as a few more things.

INSTALLATION
--------------------
In the Github repository you can find three os.* files (of types .asm, .bin and .flp). The os.asm file is the assembly code, os.bin the binary code and os.flp the floppy image. I've used VirtualBox for running the OS. When installing Pikobrain you "insert" the os.flp file into the floppy drive and start the virtual machine. If the installation is succesful you'll see an S representing "Success". If there is some sort of failure during the installation you'll not see the S. 
When Pikobrain has been installed correctly you'll remove the os.flp file and reboot (from the hard drive) the machine. If the boot is succesfull you'll be able to press a key, see a light blue background and use Pikobrain. Try the t command for example.

COMMANDS
--------------------
Commands in Pikobrain are done by pressing keys. Each command is only one character long, and do not require the user to press enter. You always use lowercase letters when entering commands, since lowercase and uppercase letters are interpreted as different. Most commands also take arguments. Arguments are inserted as two digit hexadecimal numbers (most of the time). Hexadecimal numbers are always written in upper case such as B8. When pressing a command key it will not be displayed on the screen, however the arguments are displayed (most of the time). Here is a list of the commands you can use within Pikobrain and how they work:

Time, t:
When pressing the 't' key the current time will be displayed to the screen in the format hh:mm:ss (24h clock).

Date, d:
When pressing the 'd' key the current date will be displayed in the format is yyyy/mm/dd.

Enter, enter:
When pressing the enter button the cursor will be moved to the beginning of the next line.

Return, r:
When pressing the 'r' button the cursor will be moved to the top left of the screen.

Files
----------
Files in Pikobrain are 512 bytes (512 characters) in size. If there is not enough content to fill up the 512 bytes the empty spots will consist of null characters (ASCII 0). The file managment commands also require at least one argument, the file(s) to operate onto.
The file system is structured in such a way that there are 256 folders (00-FF), each containing 63 files (01-3F) of size 512 bytes. You cannot change the size of files or folders.
You are automatically put into folder 00 (hex). In this folder files 01-03 (hex) are the OS's. So do not edit unless you know what you are doing.
If you for example want to write to file 04 of folder 00, you'll press the w key and then write 04 (as the folder is separately set). Now you can write to file 04. 

These are the file managment commands and how they work:

Memory, m:
The 'm' key followed by the file number, will display the file in hexadecimal form, similar to the os.bin file.

Ascii, a:
The 'a' key followed by the file number, will display the file in ASCII character format.
The 'a' command can be used on file number 01 in folder 00 to read a listing of the available commands in Pikobrain.

Write, w:
The 'w' key followed by the file number allow you to write to the file. When you've pressed the 'w' key and the file number you can start typing. You can use character keys and the shift key. The enter button is supported, adding characters 0xd and 0xa to the file. If you make a typo you can use the backspace key. The backspace key works as you would expect with one exception, it cannot GRAPHICALLY jump back to an earlier line, but it does erase characters as expected. In order to save a file you simply press the '`' key. The file is saved and you are back in the command interpreter. In order to cancel writing you press the tab key. This will display a small circle. 
If you have written 512 characters (bytes) the file will automatically be saved. If you save a file before reaching the 512 byte limit, the rest of the bytes up until that level will be filled with null characters ascii 0. When the file is saved you'll see a '`' character.

Edit, e:
The 'e' key followed by the file number allows to continue writing to a file. All the content of the file up until its first null character will be displayed (like the a command) and then you can write just like the w command.

Delete:
There is no seperate delete command. In order to erase a file you can open a file to write and immediately save the file or copy an empty file into the file you want to erase. Then the file will be completly filled up with null characters (ASCII 0).

Copy, c:
The 'c' key-command require three arguments; the number of the file to copy, the number of the destination folder and the number of the destination file. When you've written the first file number an automatic newline will be written. After the files has been copied a '`' character will be displayed.

--------------------

Folders
--------
Pikobrain has 256 folders (00-FF) which can be accessed by the user. Each folder has 63 files (01-3F), which can be edited. These are the commands regarding folders and how they work:

Folder, f:
The 'f' key followed by a folder number (two digit hex number) changes the folder to the entered folder number (similar to cd in MS-DOS). The folder number remains until changed or the computer reboots.

Info, i:
The 'i' key display information about the current folder. It will display the folder number and the files which has content within the folder. If a file has content you'll see its number followed by a dot and the 5 first characters of the file. This allows the use of filenames. The first 5 characters of a file can be its name. Files which include characters beyond the ascii 20-7F (hex) scope will be written as a '*' instead. This makes it possible to see which files are binary, as they include 'unconventional' characters as well, such as ascii (hex) 0D and B8.

Other
------
Other commands:

Kalculator, k:
Enter two 4-digit hex numbers (after two digits are written a newline will automatically be displayed) then write a number between 1-5 to specify the operation:
1=add, 2=subtract, 3=multiply, 4=divide, 5=modulus
When you've written the two 4-digit hex numbers, it should look something like this:
00
01
00
02
Which means the first number is hex 0001 and the second number hex 0002. If you then press 1 (add) you'll be displayed with a four digit hex number (the answer), in this case 0003. When using the calculator the answer should not be more than dec 65565 (hex FFFF) or less than 0.

Hex, h:
The 'h' key followed by a four digit hex number will convert the number into decimal and display the answer.

Program, p:
The 'p' key allows the user to run a binary program they've written. Program code shall be written in hexadecimal form (ascii uppercase letters) in files similar to how a .bin file looks like. For example the code in a file could be ascii: B8300ECD10EA00000210, which if run using the p command would output a 0 and then return to the OS.
The 'p' command takes two 2-digit hex numbers as arguments. The first is the file number of the first file of the program (as programs are allowed to span over several files within the same folder) and the second argument is the number of consecutive files to read from the first file.
For example if the program code written above (starting with B8) is in file 06, you can run the program by pressing the 'p' key and then type 06 (file number) and 01 (only 1 file read). This will run the example program. 
Since programs are written in ascii form as hexadecimals, they must be converted into runnable binary code by the OS. This means each two characters in the user's source code will represent only one mneumonic. This means a 512 byte file of code, will only be 256 bytes of actual runnable code. Source code may not include newlines, spaces or other characters besides numbers and the 6 hexadecimal letters.
When a user made program shall terminate the binary code EA00002010 (jmp 0x1020:0x0) should be run, as this will return the instruction pointer to the OS, and allow the user to continue using the OS.

Bridge, b:
The 'b' commands allows for communication with floppy disks. The user can send files between hard drive and floppy disk. The commad takes 3 2-digit hexadecimal numbers. The first is either 00 or 80. 00 means the source is the floppy disk, 80 means the source is the hard drive. The second argument is the number of the source file, and the third argument is the destination folder in the destination disk (hard drive -> floppy disk or floppy disk -> hard drive).

------
v0.5.3
